(use 'trees.handler)
(trees-for-species "Arbutus unedo :: Strawberry Tree")
(trees-for-species "Arbutus unedo :: Strawberry Tre")
(trees-for-species "Arbutus unedo :: Strawberry Tree")
(trees-for-species (str "Arbutus unedo :: Strawberry Tree"))
(filter-species "Arbutus unedo :: Strawberry Tree")
(read-string nil)
(if "aaa" 1)
(if nil 1)
inc
(inc 1)
(inc nil)
(map inc [1 2 nil 4])
(map inc [1 2 4])
(def f inc)
f
(map f [1 2 3])
(map f [1 2 nil 4])
(nil? nil)
(not (nil? nil))
(map f (filter #(not (nil? %)) [1 2 nil 4]))
(map f (filter (not nil?) [1 2 nil 4]))
(map f (filter (comp not nil?) [1 2 nil 4]))
(if 1 1)
(if nil 1)
(if 0 1)
(trees 0)
(trees 10)
(read-string nil)
(read-string true)
(def saferead #(if (not (nil? %)) (read-string %)))  
def col #(saferead (%2 %1)))     
(def col #(saferead (%2 %1))))
(def col #(saferead (%2 %1)))
(col 10 (trees 10))
(col 10 (trees 11))
(trees 10)
(trees 11)
(saferead (trees 11))
(saferead ((trees 11) 10))
(read-string ((trees 11) 10))
(col 18 (trees 11))
(col 8 (trees 11))
(def id (col 8))
(def id (partial col 8))
(id (trees 11))
(trees 22)
split
split-with
(doc split-with)
(split-with #(= "a" %) "bac")
(split-with #(= \a %) "bac")
(split-with #(= \a %) [\b \a \c])
(split-with #(= "a" %) ["b" "a" "c"])
split-at
(doc split-at)
(split-at #(= "a" %) ["b" "a" "c"])
(clojure.string/split "abc" "b)
)
"
)
(clojure.string/split "abc" "b")
(clojure.string/split "abc" #"b")
(clojure.string/split "abcc" #"b")
(clojure.string/split "ab$cc" #"$")
(clojure.string/split "ab$cc" #"\$")
(apply conj ((1 2) (3 4)))
(apply conj ([1 2] [3 4]))
(apply conj [[1 2] [3 4]])
(concat [[1 2] [3 4]])
(concat ([1 2] [3 4]))
(apply concat [[1 2] [3 4]])
(clojure.string/split "ab&cc" #"\&")
(clojure.string/split "ab&cc" #"&")
(clojure.string/split "ab" #"&")
in
contains?
(contains? 3 [1 2])
(contains? 3 [1 2 3])
(doc contains?)
(contains? [1 2 3] 3)
(contains? (val [1 2 3]) 3)
(contains? (vals [1 2 3]) 3)
vals
(vals [4 5 6])
(list [4 5 6])
(concat [4 5 6])
(contains? (concat [1 2 3]) 3)
(contains? (concat [1 2 3]) 2)
(contains? (concat [4 5 6]) 2)
(contains? (concat [4 5 6]) 5)
(doc concat)
specii
(frequencies (map species trees))
(count (frequencies (map species trees)))
(use 'trees.handler)
(use 'trees.handler :reload :all)
(read-string ((trees 11) 10))
(use 'trees.handler :reload)
species-with-counts
species-with-counts-ordered
(count species-with-counts-ordered)
type
(type species-with-counts-ordered)
(use 'trees.handler :reload)
generate-string
(use 'cheshire.core)
(generate-string species-with-counts-ordered)
